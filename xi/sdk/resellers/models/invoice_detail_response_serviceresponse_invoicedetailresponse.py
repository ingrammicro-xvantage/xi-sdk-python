# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.address_type import AddressType
from xi.sdk.resellers.models.invoice_detail_response_serviceresponse_invoicedetailresponse_extendedspecs_inner import InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner
from xi.sdk.resellers.models.invoice_detail_response_serviceresponse_invoicedetailresponse_miscfeeline_inner import InvoiceDetailResponseServiceresponseInvoicedetailresponseMiscfeelineInner
from xi.sdk.resellers.models.product_line_type import ProductLineType
from typing import Optional, Set
from typing_extensions import Self

class InvoiceDetailResponseServiceresponseInvoicedetailresponse(BaseModel):
    """
    InvoiceDetailResponseServiceresponseInvoicedetailresponse
    """ # noqa: E501
    customernumber: Optional[StrictStr] = None
    invoicenumber: Optional[StrictStr] = None
    invoicedate: Optional[date] = None
    invoicetype: Optional[StrictStr] = None
    customerordernumber: Optional[StrictStr] = None
    customerfreightamount: Optional[StrictStr] = None
    customerforeignfrightamt: Optional[StrictStr] = None
    totaltaxamount: Optional[StrictStr] = None
    totalamount: Optional[StrictStr] = None
    shiptosuffix: Optional[StrictStr] = None
    billtosuffix: Optional[StrictStr] = None
    freightamount: Optional[StrictStr] = Field(default=None, description="May not be available in all countries")
    paymentterms: Optional[StrictStr] = None
    orderdate: Optional[date] = None
    carrier: Optional[StrictStr] = None
    carrierdescription: Optional[StrictStr] = None
    discountamount: Optional[Union[StrictFloat, StrictInt]] = None
    taxtype: Optional[StrictStr] = None
    enduserponumber: Optional[StrictStr] = None
    freightforwardercode: Optional[StrictStr] = None
    creditmemoreasoncode: Optional[StrictStr] = None
    fulfillmentflag: Optional[StrictStr] = None
    holdreason: Optional[StrictStr] = None
    shipcomplete: Optional[StrictStr] = None
    shipdate: Optional[date] = None
    companycurrency: Optional[StrictStr] = None
    currencycode: Optional[StrictStr] = None
    currencyrate: Optional[StrictStr] = None
    globalorderid: Optional[StrictStr] = None
    originalshipcode: Optional[StrictStr] = None
    ordertype: Optional[StrictStr] = None
    orderstatus: Optional[StrictStr] = None
    totalotherfees: Optional[Union[StrictFloat, StrictInt]] = None
    totalsales: Optional[StrictStr] = None
    weight: Optional[StrictStr] = None
    shippableswitch: Optional[StrictStr] = None
    soldto: Optional[AddressType] = None
    billto: Optional[AddressType] = None
    shoptoaddress: Optional[AddressType] = None
    lines: Optional[List[ProductLineType]] = None
    extendedspecs: Optional[List[InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner]] = None
    miscfeeline: Optional[List[InvoiceDetailResponseServiceresponseInvoicedetailresponseMiscfeelineInner]] = None
    __properties: ClassVar[List[str]] = ["customernumber", "invoicenumber", "invoicedate", "invoicetype", "customerordernumber", "customerfreightamount", "customerforeignfrightamt", "totaltaxamount", "totalamount", "shiptosuffix", "billtosuffix", "freightamount", "paymentterms", "orderdate", "carrier", "carrierdescription", "discountamount", "taxtype", "enduserponumber", "freightforwardercode", "creditmemoreasoncode", "fulfillmentflag", "holdreason", "shipcomplete", "shipdate", "companycurrency", "currencycode", "currencyrate", "globalorderid", "originalshipcode", "ordertype", "orderstatus", "totalotherfees", "totalsales", "weight", "shippableswitch", "soldto", "billto", "shoptoaddress", "lines", "extendedspecs", "miscfeeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceDetailResponseServiceresponseInvoicedetailresponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of soldto
        if self.soldto:
            _dict['soldto'] = self.soldto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billto
        if self.billto:
            _dict['billto'] = self.billto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shoptoaddress
        if self.shoptoaddress:
            _dict['shoptoaddress'] = self.shoptoaddress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extendedspecs (list)
        _items = []
        if self.extendedspecs:
            for _item in self.extendedspecs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extendedspecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in miscfeeline (list)
        _items = []
        if self.miscfeeline:
            for _item in self.miscfeeline:
                if _item:
                    _items.append(_item.to_dict())
            _dict['miscfeeline'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceDetailResponseServiceresponseInvoicedetailresponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customernumber": obj.get("customernumber"),
            "invoicenumber": obj.get("invoicenumber"),
            "invoicedate": obj.get("invoicedate"),
            "invoicetype": obj.get("invoicetype"),
            "customerordernumber": obj.get("customerordernumber"),
            "customerfreightamount": obj.get("customerfreightamount"),
            "customerforeignfrightamt": obj.get("customerforeignfrightamt"),
            "totaltaxamount": obj.get("totaltaxamount"),
            "totalamount": obj.get("totalamount"),
            "shiptosuffix": obj.get("shiptosuffix"),
            "billtosuffix": obj.get("billtosuffix"),
            "freightamount": obj.get("freightamount"),
            "paymentterms": obj.get("paymentterms"),
            "orderdate": obj.get("orderdate"),
            "carrier": obj.get("carrier"),
            "carrierdescription": obj.get("carrierdescription"),
            "discountamount": obj.get("discountamount"),
            "taxtype": obj.get("taxtype"),
            "enduserponumber": obj.get("enduserponumber"),
            "freightforwardercode": obj.get("freightforwardercode"),
            "creditmemoreasoncode": obj.get("creditmemoreasoncode"),
            "fulfillmentflag": obj.get("fulfillmentflag"),
            "holdreason": obj.get("holdreason"),
            "shipcomplete": obj.get("shipcomplete"),
            "shipdate": obj.get("shipdate"),
            "companycurrency": obj.get("companycurrency"),
            "currencycode": obj.get("currencycode"),
            "currencyrate": obj.get("currencyrate"),
            "globalorderid": obj.get("globalorderid"),
            "originalshipcode": obj.get("originalshipcode"),
            "ordertype": obj.get("ordertype"),
            "orderstatus": obj.get("orderstatus"),
            "totalotherfees": obj.get("totalotherfees"),
            "totalsales": obj.get("totalsales"),
            "weight": obj.get("weight"),
            "shippableswitch": obj.get("shippableswitch"),
            "soldto": AddressType.from_dict(obj["soldto"]) if obj.get("soldto") is not None else None,
            "billto": AddressType.from_dict(obj["billto"]) if obj.get("billto") is not None else None,
            "shoptoaddress": AddressType.from_dict(obj["shoptoaddress"]) if obj.get("shoptoaddress") is not None else None,
            "lines": [ProductLineType.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "extendedspecs": [InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner.from_dict(_item) for _item in obj["extendedspecs"]] if obj.get("extendedspecs") is not None else None,
            "miscfeeline": [InvoiceDetailResponseServiceresponseInvoicedetailresponseMiscfeelineInner.from_dict(_item) for _item in obj["miscfeeline"]] if obj.get("miscfeeline") is not None else None
        })
        return _obj


